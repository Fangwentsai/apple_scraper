#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Firebase ÂÇô‰ªΩÁ≥ªÁµ± - ÂÑ≤Â≠ò Apple Êï¥‰øÆÂìÅË≥áÊñô‰∏¶ËøΩËπ§ÂÉπÊ†ºËÆäÊõ¥
"""

import json
import os
from datetime import datetime
import firebase_admin
from firebase_admin import credentials, firestore
from typing import Dict, List, Any

class FirebaseBackup:
    def __init__(self, service_account_path: str = None):
        """
        ÂàùÂßãÂåñ Firebase ÈÄ£Êé•
        
        Args:
            service_account_path: Firebase ÊúçÂãôÂ∏≥Êà∂ JSON Ê™îÊ°àË∑ØÂæë
        """
        self.db = None
        self.initialize_firebase(service_account_path)
    
    def initialize_firebase(self, service_account_path: str = None):
        """ÂàùÂßãÂåñ Firebase"""
        try:
            # Ê™¢Êü•ÊòØÂê¶Â∑≤Á∂ìÂàùÂßãÂåñ
            if firebase_admin._apps:
                self.db = firestore.client()
                print("‚úÖ Firebase Â∑≤ÈÄ£Êé•")
                return
            
            # ‰ΩøÁî®ÊúçÂãôÂ∏≥Êà∂ÈáëÈë∞
            if service_account_path and os.path.exists(service_account_path):
                cred = credentials.Certificate(service_account_path)
                firebase_admin.initialize_app(cred)
                print(f"‚úÖ ‰ΩøÁî®ÊúçÂãôÂ∏≥Êà∂ÈáëÈë∞ÂàùÂßãÂåñ Firebase: {service_account_path}")
            
            # ‰ΩøÁî®Áí∞Â¢ÉËÆäÊï∏
            elif os.getenv('GOOGLE_APPLICATION_CREDENTIALS'):
                cred = credentials.ApplicationDefault()
                firebase_admin.initialize_app(cred)
                print("‚úÖ ‰ΩøÁî®Áí∞Â¢ÉËÆäÊï∏ÂàùÂßãÂåñ Firebase")
            
            # ‰ΩøÁî®È†êË®≠ÊÜëË≠â
            else:
                try:
                    cred = credentials.ApplicationDefault()
                    firebase_admin.initialize_app(cred)
                    print("‚úÖ ‰ΩøÁî®È†êË®≠ÊÜëË≠âÂàùÂßãÂåñ Firebase")
                except Exception as e:
                    print(f"‚ùå Firebase ÂàùÂßãÂåñÂ§±Êïó: {e}")
                    print("Ë´ãË®≠ÂÆö Firebase ÊúçÂãôÂ∏≥Êà∂ÈáëÈë∞ÊàñÁí∞Â¢ÉËÆäÊï∏")
                    return
            
            self.db = firestore.client()
            print("üî• Firebase Firestore ÈÄ£Êé•ÊàêÂäü")
            
        except Exception as e:
            print(f"‚ùå Firebase ÂàùÂßãÂåñÈåØË™§: {e}")
            self.db = None
    
    def backup_category_data(self, category: str, data: List[Dict], check_price_changes: bool = True):
        """
        ÂÇô‰ªΩÂñÆ‰∏ÄÈ°ûÂà•Ë≥áÊñôÂà∞ Firebase
        
        Args:
            category: Áî¢ÂìÅÈ°ûÂà• (mac, ipad, airpods, etc.)
            data: Áî¢ÂìÅË≥áÊñôÂàóË°®
            check_price_changes: ÊòØÂê¶Ê™¢Êü•ÂÉπÊ†ºËÆäÊõ¥
        """
        if not self.db:
            print("‚ùå Firebase Êú™ÈÄ£Êé•")
            return False
        
        try:
            timestamp = datetime.now().isoformat()
            
            # ÂÇô‰ªΩÁï∂ÂâçË≥áÊñô
            collection_name = f"apple_refurbished_{category}"
            
            for product in data:
                product_id = f"{category}_{product.get('Â∫èËôü', 'unknown')}"
                
                # Ê∫ñÂÇôË¶ÅÂÑ≤Â≠òÁöÑË≥áÊñô
                backup_data = {
                    **product,
                    'category': category,
                    'last_updated': timestamp,
                    'backup_timestamp': timestamp
                }
                
                # Ê™¢Êü•ÂÉπÊ†ºËÆäÊõ¥
                if check_price_changes:
                    price_changed = self.check_price_change(product_id, product.get('Áî¢ÂìÅÂîÆÂÉπ'))
                    if price_changed:
                        self.log_price_change(product_id, product, timestamp)
                
                # ÂÑ≤Â≠òÂà∞ Firebase
                doc_ref = self.db.collection(collection_name).document(product_id)
                doc_ref.set(backup_data, merge=True)
            
            print(f"‚úÖ {category} È°ûÂà• {len(data)} ÂÄãÁî¢ÂìÅÂ∑≤ÂÇô‰ªΩÂà∞ Firebase")
            
            # Ë®òÈåÑÂÇô‰ªΩÊ≠∑Âè≤
            self.log_backup_history(category, len(data), timestamp)
            
            return True
            
        except Exception as e:
            print(f"‚ùå ÂÇô‰ªΩ {category} ÊôÇÁôºÁîüÈåØË™§: {e}")
            return False
    
    def check_price_change(self, product_id: str, current_price: str) -> bool:
        """Ê™¢Êü•Áî¢ÂìÅÂÉπÊ†ºÊòØÂê¶ÊúâËÆäÊõ¥"""
        try:
            # ÂæûÊâÄÊúâÈ°ûÂà•‰∏≠Â∞ãÊâæÁî¢ÂìÅ
            collections = ['apple_refurbished_mac', 'apple_refurbished_ipad', 
                          'apple_refurbished_airpods', 'apple_refurbished_homepod',
                          'apple_refurbished_accessories', 'apple_refurbished_iphone',
                          'apple_refurbished_appletv']
            
            for collection_name in collections:
                doc_ref = self.db.collection(collection_name).document(product_id)
                doc = doc_ref.get()
                
                if doc.exists:
                    old_price = doc.to_dict().get('Áî¢ÂìÅÂîÆÂÉπ')
                    if old_price and old_price != current_price:
                        print(f"üí∞ ÂÉπÊ†ºËÆäÊõ¥ÁôºÁèæ: {product_id}")
                        print(f"   ËàäÂÉπÊ†º: {old_price}")
                        print(f"   Êñ∞ÂÉπÊ†º: {current_price}")
                        return True
            
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è Ê™¢Êü•ÂÉπÊ†ºËÆäÊõ¥ÊôÇÁôºÁîüÈåØË™§: {e}")
            return False
    
    def log_price_change(self, product_id: str, product_data: Dict, timestamp: str):
        """Ë®òÈåÑÂÉπÊ†ºËÆäÊõ¥Ê≠∑Âè≤"""
        try:
            price_change_data = {
                'product_id': product_id,
                'product_title': product_data.get('Áî¢ÂìÅÊ®ôÈ°å'),
                'old_price': None,  # ÊúÉÂú® check_price_change ‰∏≠Ë®≠ÂÆö
                'new_price': product_data.get('Áî¢ÂìÅÂîÆÂÉπ'),
                'change_timestamp': timestamp,
                'product_url': product_data.get('Áî¢ÂìÅURL')
            }
            
            # ÂÑ≤Â≠òÂÉπÊ†ºËÆäÊõ¥Ë®òÈåÑ
            self.db.collection('price_changes').add(price_change_data)
            print(f"üìù ÂÉπÊ†ºËÆäÊõ¥Â∑≤Ë®òÈåÑ: {product_id}")
            
        except Exception as e:
            print(f"‚ùå Ë®òÈåÑÂÉπÊ†ºËÆäÊõ¥ÊôÇÁôºÁîüÈåØË™§: {e}")
    
    def log_backup_history(self, category: str, product_count: int, timestamp: str):
        """Ë®òÈåÑÂÇô‰ªΩÊ≠∑Âè≤"""
        try:
            backup_record = {
                'category': category,
                'product_count': product_count,
                'backup_timestamp': timestamp,
                'status': 'success'
            }
            
            self.db.collection('backup_history').add(backup_record)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Ë®òÈåÑÂÇô‰ªΩÊ≠∑Âè≤ÊôÇÁôºÁîüÈåØË™§: {e}")
    
    def backup_all_categories(self):
        """ÂÇô‰ªΩÊâÄÊúâÈ°ûÂà•ÁöÑË≥áÊñô"""
        categories = {
            'mac': 'data/apple_refurbished_mac.json',
            'ipad': 'data/apple_refurbished_ipad.json',
            'iphone': 'data/apple_refurbished_iphone.json',
            'airpods': 'data/apple_refurbished_airpods.json',
            'homepod': 'data/apple_refurbished_homepod.json',
            'appletv': 'data/apple_refurbished_appletv.json',
            'accessories': 'data/apple_refurbished_accessories.json'
        }
        
        total_products = 0
        successful_backups = 0
        
        print("üîÑ ÈñãÂßãÂÇô‰ªΩÊâÄÊúâÈ°ûÂà•Âà∞ Firebase...")
        
        for category, file_path in categories.items():
            try:
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    
                    if data:  # Âè™ÂÇô‰ªΩÊúâË≥áÊñôÁöÑÈ°ûÂà•
                        success = self.backup_category_data(category, data)
                        if success:
                            successful_backups += 1
                            total_products += len(data)
                        print(f"‚úÖ {category}: {len(data)} ÂÄãÁî¢ÂìÅ")
                    else:
                        print(f"‚ö†Ô∏è {category}: ÁÑ°Ë≥áÊñô")
                else:
                    print(f"‚ùå {category}: Ê™îÊ°à‰∏çÂ≠òÂú® ({file_path})")
                    
            except Exception as e:
                print(f"‚ùå ËôïÁêÜ {category} ÊôÇÁôºÁîüÈåØË™§: {e}")
        
        print(f"\nüéâ ÂÇô‰ªΩÂÆåÊàêÔºÅ")
        print(f"üìä ÊàêÂäüÂÇô‰ªΩ {successful_backups}/{len(categories)} ÂÄãÈ°ûÂà•")
        print(f"üì¶ Á∏ΩË®à {total_products} ÂÄãÁî¢ÂìÅÂ∑≤ÂÇô‰ªΩÂà∞ Firebase")
        
        return successful_backups, total_products
    
    def get_price_change_history(self, limit: int = 50) -> List[Dict]:
        """Áç≤ÂèñÂÉπÊ†ºËÆäÊõ¥Ê≠∑Âè≤"""
        try:
            if not self.db:
                return []
            
            # ÊåâÊôÇÈñìÂÄíÂ∫èÁç≤ÂèñÂÉπÊ†ºËÆäÊõ¥Ë®òÈåÑ
            docs = self.db.collection('price_changes')\
                          .order_by('change_timestamp', direction=firestore.Query.DESCENDING)\
                          .limit(limit)\
                          .stream()
            
            changes = []
            for doc in docs:
                changes.append(doc.to_dict())
            
            return changes
            
        except Exception as e:
            print(f"‚ùå Áç≤ÂèñÂÉπÊ†ºËÆäÊõ¥Ê≠∑Âè≤ÊôÇÁôºÁîüÈåØË™§: {e}")
            return []
    
    def get_backup_statistics(self) -> Dict:
        """Áç≤ÂèñÂÇô‰ªΩÁµ±Ë®àË≥áË®ä"""
        try:
            if not self.db:
                return {}
            
            stats = {
                'total_backups': 0,
                'categories': {},
                'last_backup': None
            }
            
            # Áç≤ÂèñÂÇô‰ªΩÊ≠∑Âè≤Áµ±Ë®à
            docs = self.db.collection('backup_history')\
                          .order_by('backup_timestamp', direction=firestore.Query.DESCENDING)\
                          .limit(100)\
                          .stream()
            
            for doc in docs:
                data = doc.to_dict()
                category = data.get('category')
                
                if category not in stats['categories']:
                    stats['categories'][category] = {
                        'backup_count': 0,
                        'total_products': 0,
                        'last_backup': None
                    }
                
                stats['categories'][category]['backup_count'] += 1
                stats['categories'][category]['total_products'] = data.get('product_count', 0)
                
                if not stats['categories'][category]['last_backup']:
                    stats['categories'][category]['last_backup'] = data.get('backup_timestamp')
                
                if not stats['last_backup']:
                    stats['last_backup'] = data.get('backup_timestamp')
                
                stats['total_backups'] += 1
            
            return stats
            
        except Exception as e:
            print(f"‚ùå Áç≤ÂèñÂÇô‰ªΩÁµ±Ë®àÊôÇÁôºÁîüÈåØË™§: {e}")
            return {}

def main():
    """‰∏ªÁ®ãÂºè - Á§∫ÁØÑÂ¶Ç‰Ωï‰ΩøÁî® Firebase ÂÇô‰ªΩ"""
    print("üî• Firebase ÂÇô‰ªΩÁ≥ªÁµ±")
    print("=" * 50)
    
    # ÂàùÂßãÂåñ Firebase ÂÇô‰ªΩÁ≥ªÁµ±
    # Ë´ãÂ∞á 'path/to/your/service-account-key.json' ÊõøÊèõÁÇ∫‰Ω†ÁöÑ Firebase ÊúçÂãôÂ∏≥Êà∂ÈáëÈë∞Ë∑ØÂæë
    firebase_backup = FirebaseBackup('firebase-service-account.json')
    
    if not firebase_backup.db:
        print("‚ùå Firebase ÈÄ£Êé•Â§±ÊïóÔºåË´ãÊ™¢Êü•Ë®≠ÂÆö")
        return
    
    # ÂÇô‰ªΩÊâÄÊúâÈ°ûÂà•
    successful_backups, total_products = firebase_backup.backup_all_categories()
    
    # È°ØÁ§∫Áµ±Ë®àË≥áË®ä
    print("\nüìä ÂÇô‰ªΩÁµ±Ë®à:")
    stats = firebase_backup.get_backup_statistics()
    if stats:
        print(f"Á∏ΩÂÇô‰ªΩÊ¨°Êï∏: {stats.get('total_backups', 0)}")
        print(f"ÊúÄÂæåÂÇô‰ªΩÊôÇÈñì: {stats.get('last_backup', 'N/A')}")
        
        for category, info in stats.get('categories', {}).items():
            print(f"  {category}: {info.get('total_products', 0)} ÂÄãÁî¢ÂìÅ")
    
    # È°ØÁ§∫ÊúÄËøëÁöÑÂÉπÊ†ºËÆäÊõ¥
    print("\nüí∞ ÊúÄËøëÂÉπÊ†ºËÆäÊõ¥:")
    price_changes = firebase_backup.get_price_change_history(10)
    if price_changes:
        for change in price_changes[:5]:  # È°ØÁ§∫ÊúÄËøë 5 Á≠Ü
            print(f"  {change.get('product_title', 'Unknown')}")
            print(f"    {change.get('old_price', 'N/A')} ‚Üí {change.get('new_price', 'N/A')}")
            print(f"    ÊôÇÈñì: {change.get('change_timestamp', 'N/A')}")
    else:
        print("  ÁõÆÂâçÁÑ°ÂÉπÊ†ºËÆäÊõ¥Ë®òÈåÑ")

if __name__ == "__main__":
    main() 